name: Test

on:
  push:
    branches:
      - master
      - develop
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aurora
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        django-version: [ "4.2", ]
        python-version: [ "3.12", ]
        experimental: [ false ]
#        include:
#          - django-version: "5.0"
#            python-version: "3.11"
#            experimental: true
    continue-on-error: ${{ matrix.experimental }}
    env:
      DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/aurora
      STATIC_URL: /static/
      STATIC_ROOT:
      PY_VER: ${{ matrix.python-version}}
      DJ_VER: ${{ matrix.django-version}}
      SECRET_KEY: super-secret-key
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pdm
        run: python -m pip install --upgrade pdm

      - name: Install dependencies
        run: |
          pdm venv create
          pdm venv activate in-project
          pdm sync

      - name: Run tests
        run: pdm run pytest tests/ --create-db --cov --cov-report xml --junit-xml junit.xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: junit.xml
        if: ${{ always() }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == 3.12
        continue-on-error: true
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          files: ./coverage.xml
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-${{env.GITHUB_REF_NAME}}
